# Load packages
library("TCGAbiolinks")
install.packages(c("TCGAbiolinks", "limma", "edgeR", "factoextra",
"FactoMineR","caret", "SummarizedExperiment",
"gplots", "survival", "survminer", "RColorBrewer",
"gProfileR", "genefilter"))
library("TCGAbiolinks")
install.packages("TCGAbiolinks")
library("TCGAbiolinks")
BiocManager::install("TCGAbiolinks")
BiocManager::install(c("TCGAbiolinks", "limma", "edgeR", "factoextra",
"FactoMineR","caret", "SummarizedExperiment",
"gplots", "survival", "survminer", "RColorBrewer",
"gProfileR", "genefilter"))
library("TCGAbiolinks")
library("limma")
library("edgeR")
library("glmnet")
library("factoextra")
library("tidyverse")
library("TCGAbiolinks")
library("limma")
library("edgeR")
library("glmnet")
# load packages
library("TCGAbiolinks")
library("tidyverse")
# get list of projects
gdcprojects <- getGDCprojects()
View(gdcprojects)
getProjectSummary("TCGA-BRCA")
query_TCGA <- GDCquery(project = "TCGA-BRCA",
data.category = "Transcriptome Profiling")
# Load packages
library(tidyverse)
library(TCGAbiolinks)
library(maftools)
library(pheatmap)
library(SummarizedExperiment)
# get a list of projects
gdcprojects <- getGDCprojects()
# get project summary
getProjectSummary('TCGA-BRCA')
# build a query
query_TCGA <- GDCquery(project = 'TCGA-BRCA',
data.category = 'Transcriptome Profiling')
output_query_TCGA <- getResults(query_TCGA)
View(output_query_TCGA)
# build a query to retrieve gene expression data
query_TCGA <- GDCquery(project = 'TCGA-BRCA',
data.category = 'Transcriptome Profiling',
experimental.strategy = 'RNA-Seq',
workflow.type = 'STAR - Counts',
access = 'open',
barcode = c('TCGA-LL-A73Y-01A-11R-A33J-07',
'TCGA-E2-A1IU-01A-11R-A14D-07',
'TCGA-AO-A03U-01B-21R-A10J-07'))
getResults(query_TCGA)
View(query_TCGA)
# download data - GDCdownload
GDCdownload(query_TCGA)
# prepare data
tcga_brca_data <- GDCprepare(query_TCGA, summarizedExperiment = TRUE)
brca_matrix <- assay(tcga_brca_data, 'fpkm_unstrand')
# build a query to retrieve DNA methylation data
query_methly <- GDCquery(project = 'TCGA-GBM',
data.category = 'DNA Methylation',
platform = 'Illumina Human Methylation 27',
access = 'open',
data.type = 'Methylation Beta Value',
barcode = c('TCGA-19-0962-01B-01D-0521-05', 'TCGA-06-0137-01A-01D-0218-05'))
output_query_methyl <- getResults(query_methly)
GDCdownload(query_methly)
# plot probes showing differences in beta values between samples
dna.meth <- GDCprepare(query_methly, summarizedExperiment = TRUE)
assay(dna.meth)
idx <- dna.meth %>%
assay %>%
rowVars() %>%
order(decreasing = TRUE) %>%
head(10)
# plot
pheatmap(assay(dna.meth)[idx,])
# download and visualize mutation data from TCGA
query_mutation <- GDCquery(project = 'TCGA-BRCA',
data.category = 'Simple Nucleotide Variation',
access = 'open',
barcode = c('TCGA-LL-A73Y-01A-11D-A33E-09,TCGA-LL-A73Y-10B-01D-A33H-09',
'TCGA-E9-A1NH-01A-11D-A14G-09,TCGA-E9-A1NH-11A-33D-A14G-09'))
output_query_mutation <- getResults(query_mutation)
GDCdownload(query_mutation)
maf <- GDCprepare(query_mutation, summarizedExperiment = TRUE)
# maftools utils to read and create dashboard
maftools.input <- read.maf(maf)
plotmafSummary(maf = maftools.input,
addStat = 'median',
rmOutlier = TRUE,
dashboard = TRUE)
# oncoprint
oncoplot(maf = maftools.input,
top = 10,
removeNonMutated = TRUE)
oncoplot
?oncoplot
plotmafSummary(maf = maftools.input,
addStat = 'median',
rmOutlier = TRUE,
dashboard = TRUE)
library(TCGAbiolinks)
library(survminer)
library(survival)
library(SummarizedExperiment)
library(tidyverse)
library(DESeq2)
# getting clinical data for TCGA-BRCA cohort
clinical_brca <- GDCquery_clinic("TCGA-BRCA")
any(colnames(clinical_brca) %in% c("vital_status", "days_to_last_follow_up", "days_to_death"))
which(colnames(clinical_brca) %in% c("vital_status", "days_to_last_follow_up", "days_to_death"))
clinical_brca[,c(9,39,45)]
# looking at some variables associated with survival
table(clinical_brca$vital_status)
# change certain values the way they are encoded
clinical_brca$deceased <- ifelse(clinical_brca$vital_status == "Alive", FALSE, TRUE)
# create an "overall survival" variable that is equal to days_to_death
# for dead patients, and to days_to_last_follow_up for patients who
# are still alive
clinical_brca$overall_survival <- ifelse(clinical_brca$vital_status == "Alive",
clinical_brca$days_to_last_follow_up,
clinical_brca$days_to_death)
# build a query to get gene expression data for entire cohort
query_brca_all = GDCquery(
project = "TCGA-BRCA",
data.category = "Transcriptome Profiling", # parameter enforced by GDCquery
experimental.strategy = "RNA-Seq",
workflow.type = "STAR - Counts",
data.type = "Gene Expression Quantification",
sample.type = "Primary Tumor",
access = "open")
output_brca <- getResults(query_brca_all)
# get 20 primary tissue sample barcodes
tumor <- output_brca$cases[1:20]
# get gene expression data from 20 primary tumors
query_brca <- GDCquery(
project = "TCGA-BRCA",
data.category = "Transcriptome Profiling", # parameter enforced by GDCquery
experimental.strategy = "RNA-Seq",
workflow.type = "STAR - Counts",
data.type = "Gene Expression Quantification",
sample.type = c("Primary Tumor", "Solid Tissue Normal"),
access = "open",
barcode = tumor)
# download data
GDCdownload(query_brca)
# get counts
tcga_brca_data <- GDCprepare(query_brca, summarizedExperiment = TRUE)
brca_matrix <- assay(tcga_brca_data, "unstranded")
brca_matrix[1:10,1:10]
# extract gene and sample metadata from summarizedExperiment object
gene_metadata <- as.data.frame(rowData(tcga_brca_data))
coldata <- as.data.frame(colData(tcga_brca_data))
# vst transform counts to be used in survival analysis
# Setting up countData object
dds <- DESeqDataSetFromMatrix(countData = brca_matrix,
colData = coldata,
design = ~ 1)
# Removing genes with sum total of 10 reads across all samples
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep,]
# vst
vsd <- vst(dds, blind=FALSE)
brca_matrix_vst <- assay(vsd)
brca_matrix_vst[1:10,1:10]
# Get data for TP53 gene and add gene metadata information to it
brca_tp53 <- brca_matrix_vst %>%
as.data.frame() %>%
rownames_to_column(var = 'gene_id') %>%
gather(key = 'case_id', value = 'counts', -gene_id) %>%
left_join(., gene_metadata, by = "gene_id") %>%
filter(gene_name == "TP53")
# get median value
median_value <- median(brca_tp53$counts)
# denote which cases have higher or lower expression than median count
brca_tp53$strata <- ifelse(brca_tp53$counts >= median_value, "HIGH", "LOW")
# Add clinical information to brca_tp53
brca_tp53$case_id <- gsub('-01.*', '', brca_tp53$case_id)
brca_tp53 <- merge(brca_tp53, clinical_brca, by.x = 'case_id', by.y = 'submitter_id')
# fitting survival curve
fit <- survfit(Surv(overall_survival, deceased) ~ strata, data = brca_tp53)
fit
ggsurvplot(fit,
data = brca_tp53,
pval = T,
risk.table = T)
fit2 <- survdiff(Surv(overall_survival, deceased) ~ strata, data = brca_tp53)
fit2
ggsurvplot(fit2,
data = brca_tp53,
pval = T,
risk.table = T)
ggsurvplot(fit2,
data = brca_tp53,
pval = T,
risk.table = T)
